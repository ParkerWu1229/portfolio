Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table =  10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business:id = 10000
ii. Hours:business_id = 1562
iii. Category:business_id = 2643
iv. Attribute:business_id = 1115
v. Review:id = 10000
vi. Checkin:business_id = 493
vii. Photo:id = 10000
viii. Tip:user_id = 537
ix. User:id = 10000
x. Friend:user_id = 11
xi. Elite_years:user_id = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	SELECT    count(*)
	FROM      user
	WHERE	  id IS NULL OR 
		  name IS NULL OR 
		  review_count IS NULL OR 
		  yelping_since IS NULL OR
		  useful IS NULL OR 
		  funny IS NULL OR 
		  cool IS NULL OR 
		  fans IS NULL OR 
		  average_stars IS NULL OR 
		  compliment_hot IS NULL OR 
		  compliment_more IS NULL OR 
		  compliment_profile IS NULL OR 
		  compliment_cute IS NULL OR 
		  compliment_list IS NULL OR 
		  compliment_note IS NULL OR 
		  compliment_plain IS NULL OR 
		  compliment_cool IS NULL OR 
		  compliment_funny IS NULL OR 
		  compliment_writer IS NULL OR 
		  compliment_photos IS NULL 
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT City, SUM(review_count) AS Reviews
	FROM business
	GROUP BY city
	ORDER BY Reviews DESC

	
	Copy and Paste the Result Below:
	+-----------------+---------+
	| city            | Reviews |
	+-----------------+---------+
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |
	| Tempe           |   10504 |
	| Pittsburgh      |    9798 |
	| Montréal        |    9448 |
	| Chandler        |    8112 |
	| Mesa            |    6875 |
	| Gilbert         |    6380 |
	| Cleveland       |    5593 |
	| Madison         |    5265 |
	| Glendale        |    4406 |
	| Mississauga     |    3814 |
	| Edinburgh       |    2792 |
	| Peoria          |    2624 |
	| North Las Vegas |    2438 |
	| Markham         |    2352 |
	| Champaign       |    2029 |
	| Stuttgart       |    1849 |
	| Surprise        |    1520 |
	| Lakewood        |    1465 |
	| Goodyear        |    1155 |
	+-----------------+---------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars, COUNT(review_count) AS Reviews_Count
FROM business
WHERE city='Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):
+-------+---------------+
| stars | Reviews_Count |
+-------+---------------+
|   1.5 |             1 |
|   2.5 |             2 |
|   3.5 |             3 |
|   4.0 |             2 |
|   4.5 |             1 |
|   5.0 |             1 |
+-------+---------------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT stars, COUNT(review_count) AS Reviews_Count
FROM business
WHERE city='Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):
+-------+---------------+
+-------+---------------+
| stars | Reviews_Count |
+-------+---------------+
|   2.0 |             1 |
|   2.5 |             1 |
|   3.0 |             2 |
|   3.5 |             2 |
|   4.0 |             1 |
|   4.5 |             2 |
|   5.0 |             5 |
+-------+---------------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
		
	Copy and Paste the Result Below:
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	Yes, posing more reviews correlates with more fans. According to R^2 = 0.4371 (SQLite cannot calculate square, or it will be 0.66), there is a strong correlation between reviews and fans.

	SQL Code:
	SELECT avg( (review_count - avg_x) * (fans - avg_y) )*avg( (review_count - avg_x) * (fans - avg_y) )/(var_x*var_y) as R2 
	FROM user, (select 
     		 avg_x,
     		 avg_y,
      		 avg((review_count - avg_x)*(review_count - avg_x)) as var_x, 
     		 avg((fans - avg_y)*(fans - avg_y)) as var_y 
     		 from user, (select 
         	 avg(review_count) as avg_x, 
         	 avg(fans) as avg_y 
         	 from user)
 		 );
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	Love appears 1780 times, but hate only appears 232 times. Hence, there are more reviews with the word "love" than the word "hate".
	
	SQL code used to arrive at answer:
	SELECT count(text) AS love_cnt, count(h.text) AS hate_cnt
	FROM review
	WHERE text LIKE '%love%' 
	
	SELECT count(text) AS hate_cnt
	FROM review
	WHERE text LIKE '%hate%' 
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as 'useful' or 'funny'?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
SELECT avg( (useful - avg_x) * (fans - avg_y) )*avg( (useful - avg_x) * (fans - avg_y) )/(var_x*var_y) as useful_R2, 
avg( (funny - avg_x2) * (fans - avg_y2) )*avg( (funny - avg_x2) * (fans - avg_y2) )/(var_x2*var_y2) as funny_R2

FROM user, (select 
     		 avg_x,
     		 avg_y,
      		 avg((useful - avg_x)*(useful - avg_x)) as var_x, 
     		 avg((fans - avg_y)*(fans - avg_y)) as var_y 
     		 from user, (select 
         	 avg(useful) as avg_x, 
         	 avg(fans) as avg_y 
         	 from user)),
(select 
     		 avg_x2,
     		 avg_y2,
      		 avg((funny - avg_x2)*(funny - avg_x2)) as var_x2, 
     		 avg((fans - avg_y2)*(fans - avg_y2)) as var_y2 
     		 from user, (select 
         	 avg(funny) as avg_x2, 
         	 avg(fans) as avg_y2 
         	 from user))
ORDER BY fans DESC
LIMIT 10

	
	Copy and Paste the Result Below:
+----------------+---------------+
|      useful_R2 |      funny_R2 |
+----------------+---------------+
| 0.157528494749 | 0.12488127215 |
+----------------+---------------+
	
	Please explain your findings and interpretation of the results:
	For "useful", the correlation is 0.3969 (square root of useful_R2), which shows the medium relationship. 
	For "funny", the correlation is 0.3534 (square root of funny_R2), which also shows the medium relationship.
	Hence, more fans truly has some relationships with being listed as "useful" or "funny".
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, but only a little difference. 2-3 stars and 4-5 stars have the same day (Saturday), but comparing to 4-5 stars (11:00-22:00 for WheelchairAccessible), 2-3stars normally has wider range of time (9:00-2:00 for CoatCheck and 5:00-0:00 for DriveThru)

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, 2-3 stars only has 68 review in total, but 4-5 stars has 438 in total.         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
No, all of them have different location and postal_code.

SQL code used for analysis:
SELECT c.category, a.name, a.value, b.city, b.review_count, b.postal_code, h.hours,
         CASE
		WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
	 END AS star_rating
FROM category c INNER JOIN hours h ON c.business_id=h.business_id INNER JOIN attribute a ON c.business_id=a.business_id INNER JOIN business b ON b.id=c.business_id
WHERE a.value IN (0,1,2,3,4) and 
      c.category LIKE 'Restaurants' and 
      b.city LIKE 'Phoenix' and 
      (B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
GROUP BY stars
ORDER BY a.value, h.hours, star_rating DESC
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
The average score of reviews for the ones that are open (57.8522012579) is much higher than the ones that are close (25.0264900662).       
         
ii. Difference 2:
The total values to which the service attributes in the ones that are open (342.0) is also much higher than in the ones that are close (100.0).       
         
         
SQL code used for analysis:
SELECT  COUNT(id),
	AVG(review_count),
	SUM(review_count),
	SUM(a.value),
	is_open
FROM business INNER JOIN attribute a ON business.id=a.business_id
GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I would like to predict the stars one new business might get through analyzing the reviews and the values attributing to the business.        
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
Before analyzing the data, we have to consider how a star-rating process works. To rate a business, there are 21 categories to value a business. 'RestaurantsPriceRange2' contributes most for the value (from 1 to 4 points), but other 19 categories may get 1 or 0. Also, a review has positive correlation with the rate. Hence, to predict the rate of a business, we have to consider the total value of the categories, especially 'RestaurantsPriceRange2', the average of reviews, and the number of value a business offers.
                  
iii. Output of your finished dataset:
+--------------+-------------------+--------------+----------------+----------------+-------+
| review_count | AVG(review_count) | SUM(a.value) | ValuePerReview | COUNT(a.value) | stars |
+--------------+-------------------+--------------+----------------+----------------+-------+
|            7 |     8.38888888889 |           31 |              4 |             36 |   5.0 |
|            5 |     9.54054054054 |           33 |              6 |             37 |   4.5 |
|            4 |           109.528 |           96 |             24 |            125 |   4.0 |
|            7 |      39.905982906 |           86 |             12 |            117 |   3.5 |
|            8 |     49.7096774194 |           91 |             11 |            124 |   3.0 |
|            5 |     17.4230769231 |           47 |              9 |             52 |   2.5 |
|            5 |     6.07317073171 |           35 |              7 |             41 |   2.0 |
|            4 |               4.0 |            3 |              0 |              6 |   1.5 |
|            4 |               4.0 |            2 |              0 |              5 |   1.0 |
+--------------+-------------------+--------------+----------------+----------------+-------+
iv. Provide the SQL code you used to create your final dataset:
		SELECT     review_count,
			   AVG(review_count),
			   SUM(a.value),
			   (SUM(a.value)/review_count) AS ValuePerReview,
			   COUNT(a.value),
			   stars
		FROM business INNER JOIN attribute a ON business.id=a.business_id
		WHERE a.value IN (0,1,2,3,4)
		GROUP BY stars
		ORDER BY stars DESC